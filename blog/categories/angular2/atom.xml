<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angular2 | Josh Bavari's Ramblings]]></title>
  <link href="http://jbavari.github.io/blog/categories/angular2/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2015-12-05T00:56:13-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Angular 2 and ng-model]]></title>
    <link href="http://jbavari.github.io/blog/2015/10/21/angular-2-and-ng-model/"/>
    <updated>2015-10-21T23:00:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/10/21/angular-2-and-ng-model</id>
    <content type="html"><![CDATA[<p>Angular 2 introduces <code>ng-model</code> from Angular 1 in a completely different manner. Due to this, I wanted to make a quick post on how to use Angular 2&rsquo;s <code>ng-model</code> to build components that alert its parents app/component of changes.</p>

<p>I&rsquo;m going to use the <a href="https://github.com/driftyco/ionic-conference-app">Ionic 2 conference app</a> as an example.</p>

<p>In this post, we&rsquo;ll look at the schedule page in the app and see how it uses the <code>ion-search-bar</code> to update its <code>searchQuery</code> to filter out sessions from the schedule when the user changes the search input.</p>

<h2>The set up</h2>

<p>On the <a href="https://github.com/driftyco/ionic-conference-app/blob/master/www/app/schedule/schedule.js#L24">schedule component</a>, we set up the search query as a simple string, as such: <code>this.searchQuery = '';</code>.</p>

<p>Then in our <a href="https://github.com/driftyco/ionic-conference-app/blob/master/www/app/schedule/schedule.html#L21">schedule page template</a>, we tell the <code>ion-search-bar</code> to use the <code>ng-model</code> directive and tell it to two-way bind using the schedule component&rsquo;s <code>searchQuery</code> variable.</p>

<p>The template is like this:</p>

<p><code>html
&lt;ion-search-bar [(ng-model)]="searchQuery" placeholder="Search"&gt;&lt;/ion-search-bar&gt;
</code></p>

<p>Now, in the search bar, we need to take that <code>searchQuery</code> as an ngModel, and ensure the search-bar has a <a href="https://github.com/angular/angular/blob/master/modules/angular2/src/core/forms/directives/ng_control.ts#L14">value accessor</a> implemented, so that we may tell the schedule component of when things change to update its shadow DOM if need be.</p>

<p>The <a href="https://github.com/driftyco/ionic2/blob/master/ionic/components/search-bar/search-bar.ts#L46-L62">ion-search-bar</a> will take an <code>ngControl</code> as part of it&rsquo;s injection, and sets up the <a href="https://github.com/driftyco/ionic2/blob/master/ionic/components/search-bar/search-bar.ts#L61">value accessor</a> to itself, like so:</p>

<p>```js
constructor(
  elementRef: ElementRef,
  config: Config,
  ngControl: NgControl,
  renderer: Renderer
) {
  super(elementRef, config);
  this.renderer = renderer;
  this.elementRef = elementRef;
  if(!ngControl) {</p>

<pre><code>// They don't want to do anything that works, so we won't do anything that breaks
return;
</code></pre>

<p>  }</p>

<p>  this.ngControl = ngControl;
  this.ngControl.valueAccessor = this;
}
```</p>

<p>NOTE: <code>ngModel</code> extends the <code>ngControl</code> class in angular (<a href="https://github.com/angular/angular/blob/master/modules/angular2/src/core/forms/directives/ng_model.ts#L44">source code</a>). The <a href="https://github.com/angular/angular/blob/master/modules/angular2/src/core/forms/directives/ng_control.ts#L14"><code>valueAccessor</code></a> is a <a href="https://github.com/angular/angular/blob/master/modules/angular2/src/core/forms/directives/control_value_accessor.ts">ControlValueAccessor</a> is an interface that provides certain methods, like so:</p>

<p><code>js
export interface ControlValueAccessor {
  writeValue(obj: any): void;
  registerOnChange(fn: any): void;
  registerOnTouched(fn: any): void;
}
</code></p>

<p>The <code>ControlValueAccessor</code> gives us a method to write the new value, a method to register to listen to the changes, and the register on touched function to allow components to use.</p>

<p>Those are implemented in the search-bar, as seen <a href="https://github.com/driftyco/ionic2/blob/master/ionic/components/search-bar/search-bar.ts#L82-L92">here</a>.</p>

<p>You can see that the <code>writeValue</code> method on <code>search-bar</code> updates it&rsquo;s local <code>value</code>, so that it&rsquo;s internal <code>&lt;input&gt;</code> element can update its value it shows. When that internal input is changed, it calls the <a href="https://github.com/driftyco/ionic2/blob/master/ionic/components/search-bar/search-bar.ts#L94-L98">inputChanged</a> event on the <code>search-bar</code>, which alerts other components that it has changed, as well as updating its current value.</p>

<p>```js
  inputChanged(event) {</p>

<pre><code>this.writeValue(event.target.value);
this.onChange(event.target.value);
</code></pre>

<p>  }
```</p>

<h3>Filtering out sessions</h3>

<p>Since the <code>onChange</code> event is called, the <code>schedule</code> component will see this and cause re-evaluation on its <code>searchQuery</code> variable, and filters the code.</p>

<p>That makes our filtering method super easy, <a href="https://github.com/driftyco/ionic-conference-app/blob/master/www/app/schedule/schedule.js#L54">as seen here</a>, copied below for convenience:</p>

<p>`&ldquo;js
getSessionsForTheDay() {
  if (!this.searchQuery || this.searchQuery.trim() == &rdquo;) {</p>

<pre><code>return this.sessionsForTheDay;
</code></pre>

<p>  }
  var talks = [];
  this.sessionsForTheDay.forEach((session) => {</p>

<pre><code>var matched = session.talks.filter((v) =&gt; {
  if(v.name.toLowerCase().indexOf(this.searchQuery.toLowerCase()) &gt;= 0) {
    return true;
  }
  return false;
});
if (matched.length &gt; 0) {
  session.talks = matched;
  talks.push(session);
}
</code></pre>

<p>  });
  return talks;
}
```</p>

<p>When the schedule component&rsquo;s variable for <code>searchQuery</code> is updated, this method will be auto-magically re-evaluated, which causes the list to update.</p>

<p>Hope this helps you understand Angular 2 and ng-models better! Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular 2 Injectables]]></title>
    <link href="http://jbavari.github.io/blog/2015/10/19/angular-2-injectables/"/>
    <updated>2015-10-19T16:34:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2015/10/19/angular-2-injectables</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been fortunate enough to be working on Angular 2 while being on the Ionic team.</p>

<p>I really enjoyed Pascal Precht&rsquo;s post about <a href="http://blog.thoughtram.io/angular/2015/05/18/dependency-injection-in-angular-2.html">Dependency injection in Angular 2</a>. One thing that I want to shed some more light on is how dependency injection works in an Angular 2 application using the <code>@Injectable</code> metadata thats passed for a class that&rsquo;s to be injected.</p>

<p>Quick tip: take a quick look at the <a href="https://angular.io/docs/ts/latest/guide/cheatsheet.html">Angular 2 cheat sheet</a> to see some more of these Angular 2 syntax and API.</p>

<h2>The basics of Depdendency injection</h2>

<p>The gist of it we need:</p>

<p>1) A class with <code>@Injectable</code> to tell angular 2 that its to be injected &ndash; DataService<br/>
2) A class with a constructor that accepts a type to be injected</p>

<p>A solid example, DataService marked as <code>@Injectable</code> that also needs <code>Http</code> to be injected for its use:</p>

<p>```js
import {Injectable, bind} from &lsquo;angular2/angular2&rsquo;;
import {Http} from &lsquo;angular2/http&rsquo;;</p>

<p>@Injectable() /<em> This is #1 </em>/
export class DataService {
  constructor(<a href="http:">http:</a> Http /<em> This is #2 </em>/ ) {</p>

<pre><code>this.http = http;
</code></pre>

<p>  }
}
```</p>

<p>What we have in the example above is a class, DataService, that needs Http to do what it needs to be done.</p>

<h2>An example scenario</h2>

<p>Let&rsquo;s say we have the following scenario, an angular 2 application with an app, a page for sessions, session details, speakers, and a data service that provides the data for those pages.</p>

<p>We&rsquo;d want the app instance to instantiate the data service, then have a component <code>schedule</code> that can use the data service as provided by the app instance. From there, we&rsquo;d have the session detail that also gets the schedule data from the data service.</p>

<p>The hierarchy would look like this:</p>

<p>```bash</p>

<pre><code>          App 
           |  
  |.............|...............|
  |             |               |
</code></pre>

<p>   Schedule      Speakers     Session-detail</p>

<pre><code>  |
  |
</code></pre>

<p>  Schedule-list
```</p>

<p>All of these components will need the instance of data service.</p>

<p>We&rsquo;ll need:</p>

<ul>
<li>A data serviced marked with <code>@Injectable</code>.</li>
<li>A schedule page</li>
<li>A schedule-list component</li>
<li>A speakers page</li>
</ul>


<p>Say you have the following:</p>

<p>In <code>www/app/service/data.js</code>:</p>

<p>```js
import {Injectable} from &lsquo;angular2/angular2&rsquo;;
import {Http} from &lsquo;angular2/http&rsquo;;</p>

<p>@Injectable()
export class DataService {
  constructor(<a href="http:">http:</a> Http) {</p>

<pre><code>this.http = http;
this.data = null;
console.log('DataService constructor');
</code></pre>

<p>  }</p>

<p>  retrieveData() {</p>

<pre><code>this.http.get('api/data/data.json')
.map(res =&gt; res.json())
.subscribe(data =&gt; {
  this.data = data;
});
</code></pre>

<p>  }
}
```</p>

<p>We&rsquo;d also have our Application object, <code>www/app/app.js</code>:</p>

<p>```js
import {App, Platform, StatusBar} from &lsquo;ionic/ionic&rsquo;;
import {DataService} from &lsquo;./service/data&rsquo;;
import {AboutPage} from &lsquo;./about/about&rsquo;;
import {MapPage} from &lsquo;./map/map&rsquo;;
import {SchedulePage} from &lsquo;./schedule/schedule&rsquo;;
import {SpeakersPage} from &lsquo;./speakers/speakers&rsquo;;</p>

<p>@App({
  templateUrl: &lsquo;app/app.html&rsquo;,
  providers: [DataService]
  /*</p>

<pre><code>Here we're saying, please include an instance of 
DataService for all my children components,
in this case being sessions, speakers, 
and session detail.
</code></pre>

<p>  */
})
class ConferenceApp {
  constructor(platform: Platform, data: DataService) {</p>

<pre><code>data.retrieveData();
</code></pre>

<p>  }
}</p>

<p>```</p>

<p>Then we&rsquo;d have our speakers component, <code>www/app/speakers/speakers.js</code>:</p>

<p>```js
import {Page} from &lsquo;ionic/ionic&rsquo;;
import {DataService} from &lsquo;../service/data&rsquo;;
import {SpeakerDetailPage} from &lsquo;../speaker-detail/speaker-detail&rsquo;;
import {SessionDetailPage} from &lsquo;../session-detail/session-detail&rsquo;;</p>

<p>@Page({
  templateUrl: &lsquo;app/speakers/speakers.html&rsquo;
})
export class SpeakersPage {
  constructor(nav: NavController, data: DataService) {</p>

<pre><code>this.nav = nav;
this.speakers = null;
this.dataService = data;
</code></pre>

<p>  }</p>

<p>  onInit() {</p>

<pre><code>this.speakers = this.dataService.getSchedule();
</code></pre>

<p>  }
}</p>

<p>```</p>

<p>Now I want to point something out above. If we had the <code>SpeakersPage</code> to also have a <code>providers: [DataService]</code>, we are telling angular 2 to create an instance of DataService to make it available for <code>SpeakersPage</code>&rsquo;s children, <strong>instead of</strong> using the DataService that <code>ConferenceApp</code> provided.</p>

<p>I repeat, we&rsquo;d have two instances of <code>DataService</code> with this:</p>

<p>```js
import {Page} from &lsquo;ionic/ionic&rsquo;;
import {DataService} from &lsquo;../service/data&rsquo;;
import {SpeakerDetailPage} from &lsquo;../speaker-detail/speaker-detail&rsquo;;
import {SessionDetailPage} from &lsquo;../session-detail/session-detail&rsquo;;</p>

<p>@Page({
  templateUrl: &lsquo;app/speakers/speakers.html&rsquo;,
  providers: [DataService]
  // This will instantiate a new DataService for its children
})
export class SpeakersPage {
  constructor(nav: NavController, data: DataService) {</p>

<pre><code>this.nav = nav;
this.speakers = null;
this.dataService = data;
</code></pre>

<p>  }</p>

<p>  onInit() {</p>

<pre><code>this.speakers = this.dataService.getSchedule();
</code></pre>

<p>  }
}
```</p>

<p>This is very important. If we had a <code>console.log</code> statement in the <code>DataService</code> constructor, we&rsquo;d see it run twice with the <code>providers: [DataService]</code> being specified.</p>

<p>One thing to remember, if at the root application you specify a provider, it will be available to all children components that it contains, unless you specify a <code>providers</code> that then will initialize a new instance of that provided class.</p>

<p>I hope this post helps clear up dependency injection in Angular 2. Now get back to coding!</p>
]]></content>
  </entry>
  
</feed>
