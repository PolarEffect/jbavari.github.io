<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: api | Josh Bavari's Ramblings]]></title>
  <link href="http://jbavari.github.io/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2015-12-04T11:28:24-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using JSON serializers in Sinatra]]></title>
    <link href="http://jbavari.github.io/blog/2015/12/04/using-json-serializers-in-sinatra/"/>
    <updated>2015-12-04T11:17:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/12/04/using-json-serializers-in-sinatra</id>
    <content type="html"><![CDATA[<p>I ran into a quick little issue with serializing some of my <a href="https://github.com/jeremyevans/sequel">Sequel</a> models.</p>

<p>The <a href="http://sequel.jeremyevans.net/rdoc-plugins/classes/Sequel/Plugins/JsonSerializer.html">official JSON serializer docs</a> are great, I just wanted to shine more light on the issue.</p>

<p>If you&rsquo;re using Sequel models, just throw in the quick line of <code>plugin :json_serializer</code>.</p>

<p>``` ruby</p>

<h1>Get our database connection</h1>

<p>require_relative &ldquo;./db&rdquo;
module ScoreboardApi
  class Team &lt; Sequel::Model(:team)</p>

<pre><code>plugin :json_serializer
serialize_attributes :json, :name
</code></pre>

<p>  end
end
```</p>

<p>Then, you just use the Sinatra contrib gem to have it json serializer attach:</p>

<p>```</p>

<h1>Web framework</h1>

<p>gem &ldquo;sinatra&rdquo;, &ldquo;1.4.6&rdquo;, require: &ldquo;sinatra/base&rdquo;</p>

<h1>Sinatra addons &ndash; JSON, Namespace</h1>

<p>gem &ldquo;sinatra-contrib&rdquo;, &ldquo;1.4.6&rdquo;
```</p>

<p>Set up your API routes and spit out JSON:</p>

<p>```
require &ldquo;bundler&rdquo;
require &ldquo;sinatra/base&rdquo;
require &ldquo;sinatra/json&rdquo;
require &ldquo;sinatra/namespace&rdquo;</p>

<p>require &ldquo;./models/scoreboard&rdquo;
require &ldquo;./models/team&rdquo;</p>

<p>Bundler.require</p>

<p>module ScoreboardApi
  class App &lt; Sinatra::Application</p>

<pre><code>register Sinatra::Namespace
configure do
  disable :method_override
  disable :static

  set :sessions,
      :httponly     =&gt; true,
      :secure       =&gt; production?,
      :expire_after =&gt; 31557600, # 1 year
      :secret       =&gt; ENV["SESSION_SECRET"]
end

use Rack::Deflater

namespace "/api/v1" do
  get "/scores" do
    json :scoreboard =&gt; Scoreboard.all
  end

  get "/teams" do
    json :teams =&gt; Team.all
  end
end
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>That"s all folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Safari 9 Force Touch API]]></title>
    <link href="http://jbavari.github.io/blog/2015/12/03/playing-with-safari-9-force-touch-api/"/>
    <updated>2015-12-03T10:46:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/12/03/playing-with-safari-9-force-touch-api</id>
    <content type="html"><![CDATA[<p>I just got the new Macbook Pro not too long ago and noticed they had this intimately named featured called Force Touch.</p>

<p>Force touch, as it sounds, lets you touch things more <em>intimately</em>. The gist is this &ndash; there are sensors on the new touch pad that let you determine how hard the touch pad is touched, and has some API into that.</p>

<p>I admit, the API is kinda just for fun since only Safari 9 and new Macbooks have the feature. Still, I wanted to play more with ES6 and create a little API wrapper to make it easier and let this feature name to be a little less creepy.</p>

<p>After a little googling, I found an awesome <a href="http://www.joshuakehn.com/2015/10/22/using-new-force-touch-apis-in-javascript.html">blog post by Joshua Kehn</a> that detailed more about using Force touch. I wanted to make a quick wrapper around it to do some fun effects and animations.</p>

<p>The idea is &ndash; we&rsquo;ll have an API called <code>TheForce</code> that we can attach handlers to for fun visual effects.</p>

<p>Joshua&rsquo;s demo had a box that when tapped and applying pressure, padding would be increased. I took <a href="https://gist.github.com/joshkehn/3ed6b535408162fe94ae">his gist</a> and turned it into an ES6 module. (See the <a href="http://www.joshuakehn.com/2015/10/22/using-new-force-touch-apis-in-javascript.html#demo">demo</a>)</p>

<h2>The API</h2>

<p>I wrote it up last night in a quick hurry. The gist is this:</p>

<ul>
<li>Attach to a DOM element</li>
<li>Apply a glow to the element based applied pressure to touchpad</li>
</ul>


<p>Code to attach a button named <code>you</code>, and trigger it automatically:</p>

<p>``` js
var luke = TheForce.beWith(&lsquo;you&rsquo;).alter({&lsquo;boxShadow&rsquo;);</p>

<!-- luke.alter('boxShadow'); -->


<p>```</p>
]]></content>
  </entry>
  
</feed>
