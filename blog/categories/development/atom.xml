<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | Josh Bavari's Ramblings]]></title>
  <link href="http://jbavari.github.io/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2015-11-22T16:43:36-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Its not the tools - its you]]></title>
    <link href="http://jbavari.github.io/blog/2014/03/01/its-not-the-tools-its-you/"/>
    <updated>2014-03-01T02:16:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2014/03/01/its-not-the-tools-its-you</id>
    <content type="html"><![CDATA[<h1>Reminder &ndash; you write the code, not the tools</h1>

<p>Duh, right?</p>

<p>There&rsquo;s a lot of debate I see about people saying you have to use a certain language or tool
to write good software or create apps. This is simply not the fact.</p>

<p>Case and point &ndash; if you write an app in iOS and it works great, the user simply does not care if it
was written in Objective-C, PhoneGap, or some other hybrid tool. (NOTE: unless the user is a troll)</p>

<p>I personally do a lot of work lately with Cordova/PhoneGap. I actively contribute to Cordova as well.
When I hear purists come down on the technology, I really wonder why.</p>

<p>Certainly, there can be some bad apps created with it. The same can be said for Objective-C!
Whatever the tool/language is, it can always be used in the wrong or inefficient way.</p>

<p>The truth is, there are some awesome technologies coming out from all kinds of directions.
What makes the tech better? The tools/languages/software used, or the overall look/feel/usage?</p>

<h2>Why am I writing this?</h2>

<p>Lately, I&rsquo;ve been trying to grow as a developer and really fine tune my craft.
I&rsquo;m writing this to remind myself &amp; hopefully remind others, any products/apps we make are only as good as we can make them.
<strong>NOT</strong> the tools we use to make them. (NOTE: sometimes a tool can improve performance, or some other aspect, but its still up to you to learn and adapt)</p>

<h2>If your app/product sucks, its your fault</h2>

<p>That&rsquo;s right &ndash; true responsibility.</p>

<p>Think about this &ndash; these days developers can make awesome, usable softare with only a text editor and some command line tools.</p>

<p>Now, given some additional IDEs, SDKs, Frameworks, ETC., the same developer could make more software, generally quicker.
Was it the tools that made the finalized product awesome?</p>

<p>That being said, if you are using a tool/system/framework, and it truly does suck &ndash; guess what?
You are free to change it!</p>

<h2>The weakness is you</h2>

<p>What makes someone great at anything is when they know what they are weak at and actively improve on those weaknesses.</p>

<p>One thing I wanted to focus fire this year was hitting my weak points.</p>

<p>It&rsquo;s always difficult to take a true honest look at yourself and evaluate what actions you should take. However, if you really want to improve and get ahead, there&rsquo;s no other way.</p>

<h3>Some of my weaknesses</h3>

<ul>
<li>Writing tests for my code &amp; taking a TDD approach</li>
<li>Actively testing my product (thoroughly)</li>
<li>Reading and keeping up to date with knowledge (blogs/books/etc)</li>
<li>Communicating and expressing my ideas</li>
</ul>


<h3>What I&rsquo;m trying</h3>

<ul>
<li>Expecting small improvements.</li>
<li>Iterate quickly.</li>
<li>Evaluate often.</li>
<li>Always be learning.</li>
</ul>


<h3>What I&rsquo;m doing</h3>

<ul>
<li>Starting to write tests for older code &amp; refactoring when needed, especially in Javascript &amp; Ruby</li>
<li>Getting together active test runners for iOS, Android, and the Web (CasperJS).</li>
<li>Evaluating weekly my tests I&rsquo;m writing &ndash; Using <a href="http://codeclimate.com">Code climate</a> to evaluate the quality/complexity of our code</li>
<li>Looking at other open source projects and how they write tests</li>
<li>Reading some BDD/TDD books to learn</li>
</ul>


<h2>The big picture</h2>

<p>Next time you are getting frustrated with your tools, programming language, etc &ndash; remember, it&rsquo;s up to you to improve it, or improve yourself. Cheers.</p>
]]></content>
  </entry>
  
</feed>
