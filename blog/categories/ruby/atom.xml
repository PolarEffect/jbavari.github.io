<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Josh Bavari's Ramblings]]></title>
  <link href="http://jbavari.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jbavari.github.io/"/>
  <updated>2015-12-04T11:28:24-07:00</updated>
  <id>http://jbavari.github.io/</id>
  <author>
    <name><![CDATA[Josh Bavari]]></name>
    <email><![CDATA[jbavari@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using JSON serializers in Sinatra]]></title>
    <link href="http://jbavari.github.io/blog/2015/12/04/using-json-serializers-in-sinatra/"/>
    <updated>2015-12-04T11:17:00-07:00</updated>
    <id>http://jbavari.github.io/blog/2015/12/04/using-json-serializers-in-sinatra</id>
    <content type="html"><![CDATA[<p>I ran into a quick little issue with serializing some of my <a href="https://github.com/jeremyevans/sequel">Sequel</a> models.</p>

<p>The <a href="http://sequel.jeremyevans.net/rdoc-plugins/classes/Sequel/Plugins/JsonSerializer.html">official JSON serializer docs</a> are great, I just wanted to shine more light on the issue.</p>

<p>If you&rsquo;re using Sequel models, just throw in the quick line of <code>plugin :json_serializer</code>.</p>

<p>``` ruby</p>

<h1>Get our database connection</h1>

<p>require_relative &ldquo;./db&rdquo;
module ScoreboardApi
  class Team &lt; Sequel::Model(:team)</p>

<pre><code>plugin :json_serializer
serialize_attributes :json, :name
</code></pre>

<p>  end
end
```</p>

<p>Then, you just use the Sinatra contrib gem to have it json serializer attach:</p>

<p>```</p>

<h1>Web framework</h1>

<p>gem &ldquo;sinatra&rdquo;, &ldquo;1.4.6&rdquo;, require: &ldquo;sinatra/base&rdquo;</p>

<h1>Sinatra addons &ndash; JSON, Namespace</h1>

<p>gem &ldquo;sinatra-contrib&rdquo;, &ldquo;1.4.6&rdquo;
```</p>

<p>Set up your API routes and spit out JSON:</p>

<p>```
require &ldquo;bundler&rdquo;
require &ldquo;sinatra/base&rdquo;
require &ldquo;sinatra/json&rdquo;
require &ldquo;sinatra/namespace&rdquo;</p>

<p>require &ldquo;./models/scoreboard&rdquo;
require &ldquo;./models/team&rdquo;</p>

<p>Bundler.require</p>

<p>module ScoreboardApi
  class App &lt; Sinatra::Application</p>

<pre><code>register Sinatra::Namespace
configure do
  disable :method_override
  disable :static

  set :sessions,
      :httponly     =&gt; true,
      :secure       =&gt; production?,
      :expire_after =&gt; 31557600, # 1 year
      :secret       =&gt; ENV["SESSION_SECRET"]
end

use Rack::Deflater

namespace "/api/v1" do
  get "/scores" do
    json :scoreboard =&gt; Scoreboard.all
  end

  get "/teams" do
    json :teams =&gt; Team.all
  end
end
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>That"s all folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pushing Jobs to Sidekiq From Another Server]]></title>
    <link href="http://jbavari.github.io/blog/2014/06/21/pushing-jobs-to-sidekiq-from-another-server/"/>
    <updated>2014-06-21T00:35:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2014/06/21/pushing-jobs-to-sidekiq-from-another-server</id>
    <content type="html"><![CDATA[<p>We use <a href="http://sidekiq.org/">Sidekiq</a> for our background job processing for videos, social integrations, and other tasks. It works great for what it does.</p>

<p>Due to some of technical decisions at work, we have a few servers set up.</p>

<ul>
<li>An API server</li>
<li>A job processing server</li>
<li>An analytical dashboard Rails server</li>
</ul>


<p>The job processing server has all the Sidekiq worker models in it, as you&rsquo;d expect. We did this to keep all processing in one central location.</p>

<p>Some use cases we have for it is to have all Push notifications sent from a single location, the job server. However, we need to trigger some of those from our API or analytical dashboard.</p>

<h2>The problem and solution</h2>

<p>How do we get workers queued up from other servers without replicating the Worker class in other servers? Since Sidekiq uses <a href="http://redis.io">Redis</a>, we figure&rsquo;d we&rsquo;d make a simple <code>RedisJobPusher</code> class to push workers to list in Redis that Sidekiq watches. Using this class, we can now queue jobs from other servers.</p>

<p>The class has a core method, <code>push_to_queue</code>, that other methods (<code>push_leg_notification</code>, etc) call to push the worker name and parameters in redis. The above class assumes it is able to connect to redis.</p>

<p>It looks like this:</p>

<p>``` ruby
require &lsquo;redis&rsquo;
require &lsquo;json&rsquo;
class RedisJobPusher</p>

<pre><code>def self.push_leg_notification(user_id, event_id, message, title)
    params = [user_id, event_id, 'leg', message, title, nil]
    RedisJobPusher.push_to_queue('PushNotificationWorker', params)
end

def self.push_post_notification(user_id, event_id, message, title, event_user_social_id)
    params = [user_id, event_id, 'post', message, title, event_user_social_id]
    RedisJobPusher.push_to_queue('PushNotificationWorker', params)
end

def self.push_to_queue(worker_name, params)
# using &lt;&lt;  rather than + because it cats instead of newing up string objects
redisurl = 'redis://' &lt;&lt; CONFIG[:redis_server] &lt;&lt; ':6379' &lt;&lt; '/' &lt;&lt; CONFIG[:redis_db_num]

    msg = { 'class' =&gt; worker_name, 'args' =&gt; params, 'retry' =&gt; true }
    redis = Redis.new(:url =&gt; redisurl)
    redis.lpush("raisemore_sidekiq:queue:JobWorker", JSON.dump(msg))
end
</code></pre>

<p>end
```</p>

<p>As you can see, there isn&rsquo;t a lot going on here. Simple and easy. Just connect to redis, do a quick <code>lpush</code>, and go on your day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Relationships in RethinkDB]]></title>
    <link href="http://jbavari.github.io/blog/2014/05/17/handling-relationships-in-rethinkdb/"/>
    <updated>2014-05-17T23:06:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2014/05/17/handling-relationships-in-rethinkdb</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been playing a lot with <a href="http://rethinkdb.com">RethinkDB</a> and I&rsquo;m in love with it. Such a sweet document database, amazingly beautiful web interface, and easy to use API&rsquo;s in three different languages. I started up a side project that involves some relational data, and ran into a few bumps along the road.</p>

<p>I&rsquo;m writing this post to share some of the knowledge I&rsquo;ve acquired along the way, and hopefully some will find it helpful.</p>

<h2>The problem</h2>

<p>I&rsquo;m using a doc db because I&rsquo;m still not sure of my database schema, and since its mostly a prototype, I need something flexible. The project is for physical therapy patients involving rehabilitation programs. Each program is comprised of several exercises, and a program is assigned to one user. A user can have multiple programs.</p>

<p>Eat your ER heart out:</p>

<p><img class="[pic]" src="/images/PtMotions.png" title="[250] [250] [PT Motions ER Diagram [ER Diagram]]" ></p>

<h3>Technologies Used</h3>

<p>I wanted to keep it light, so I chose using <a href="http://www.sinatrarb.com/">Sinatra</a> for my API and <a href="http://ionicframework.com">Ionic Framework</a> for my mobile application. BTW &ndash; when it comes to choosing a framework for Cordova, I suggest trying Ionic. They are crushing it.</p>

<h2>Setting up the tables</h2>

<p>First I made a dataload.rb file, which would be run on the init of my server which would set up my database, set up the tables, and dump some initial data in the tables. It looked something like this:</p>

<p>``` ruby InitialData.rb
require &lsquo;rethinkdb&rsquo;</p>

<h1>We will use these settings later in the code to connect</h1>

<h1>to the RethinkDB server.</h1>

<p>RDB_CONFIG = {</p>

<pre><code>:host =&gt; ENV['RDB_HOST'] || 'localhost', 
:port =&gt; ENV['RDB_PORT'] || 28015,
:db   =&gt; ENV['RDB_DB']   || 'PtMotions'
</code></pre>

<p>}</p>

<h1>A friendlly shortcut for accessing ReQL functions</h1>

<p>r = RethinkDB::RQL.new</p>

<p>@rdb_connection = r.connect(:host => RDB_CONFIG[:host], :port => RDB_CONFIG[:port], :db => RDB_CONFIG[:db])</p>

<p>@users = [</p>

<pre><code>{ 
    :clinicId =&gt; 'At Home PT',
    :patientId =&gt; 'jbavari'
}
</code></pre>

<p>]</p>

<p>user_id = nil</p>

<p>@users.each do |user|</p>

<pre><code>begin
    result = r.table('Users').insert(user).run(@rdb_connection)
    # Grab user id from result to use later for assigning the program
    user_id = result['generated_keys'][0]
rescue
    p 'Error: ' + result.to_s
end
</code></pre>

<p>end</p>

<p>@exercises = [{</p>

<pre><code>      :name =&gt; 'Resisted Right Shoulder Internal/External Rotation',
      :startingPosition =&gt; 'Lying on your back with your legs bent with your right hand holding a kettle bell.',
      :description =&gt; 'Lift the kettle bell straight up in the air and hold. Pull your shoulder into the ground and away from your ear. Slowly rotate your arm all the way in then all the way out without letting your arm sway',
      :whatYouFeel =&gt; 'Strengthing in your right shoulder',
      :videoUrl =&gt; 'http://ptmotions.com/ptm_mp4_768_432/s11t02_063.mp4'
    },
    {
      :name =&gt; 'Side Resisted Right Shoulder Internal/External Rotation',
      :startingPosition =&gt; 'Lying on your left side with your right hand holding a kettle bell',
      :description =&gt; 'Lift the kettle bell straight up in the air and hold. Pull your shoulder down away from your ear. Slowly rotate your arm all the way in, then all the way out without letting your arm sway',
      :whatYouFeel =&gt; 'Strengthing in your right shoulder',
      :videoUrl =&gt; 'http://ptmotions.com/ptm_mp4_768_432/s11t02_065.mp4'
    }
</code></pre>

<p>]</p>

<p>exercise_list = Array.new</p>

<p>@exercises.each do |exercise|</p>

<pre><code>begin
    result = r.table('Exercises').insert(exercise).run(@rdb_connection)
    exercise_list.push result['generated_keys'][0]
rescue
    p 'Error: ' + result.to_s
end
</code></pre>

<p>end</p>

<p>@joshs_program = {</p>

<pre><code>:name =&gt; 'Joshs Shoulder Rehab',
:notes =&gt; 'Focus on keeping core tight',
:instructions =&gt; {
    :howOften =&gt; '3 sets per day',
    :howMany =&gt; '15 per side'
},
:exercises =&gt; exercise_list,
:userId =&gt; user_id
</code></pre>

<p>}</p>

<p>begin</p>

<pre><code>result = r.table('Programs').insert(@joshs_program).run(@rdb_connection)
</code></pre>

<p>rescue</p>

<pre><code>p 'Error: ' + result.to_s
</code></pre>

<p>end
```</p>

<p>Above you&rsquo;ll see I have a list of exercises, as they are inserted I add their ID&rsquo;s to an array. I then take that array and use that to store in <code>@joshs_program</code> so that I can set up a relationship with exercises.</p>

<h2>Retrieving data</h2>

<p>Now that I have programs with an array of exercises, I need to get all the exercises by the program. First &ndash; I need a query that will get me all of my exercises by program ID &ndash; so thats similar to a type of inner join, or a SQL equivalent of <code>SELECT IN</code>. Luckily, RethinkDB has awesome documentation about <a href="http://rethinkdb.com/docs/sql-to-reql/">SQL-to-RQL</a> and <a href="http://rethinkdb.com/docs/data-modeling/">data modeling</a>.</p>

<p>From the documentation, they recommend doing the following:</p>

<p>``` python
r.table(&ldquo;users&rdquo;).filter(lambda doc:</p>

<pre><code>r.expr(["Peter", "John"])
    .contains(doc["name"])
</code></pre>

<p>)
```</p>

<p>However, the example is in Python, so you&rsquo;ll need to do a little more work to get it in Ruby.</p>

<p>This led me to take a different path in RQL. I found out how to do a <code>SELECT IN</code> type query, and in Ruby it looks like this with <code>inner_join</code>:</p>

<p>``` ruby
@programId = params[:programId] || &lsquo;37feebf9-54ce-45f5-ba76-d13fe634b035&rsquo;
exercises = r.table(&ldquo;Programs&rdquo;)</p>

<pre><code>    .filter({'id' =&gt; @programId})
    .inner_join( r.table("Exercises")) { |p, e| 
        p['exercises'].contains( e['id'] ) 
    }
    .zip()
    .without('exercises', 'userId')
    .order_by(r.desc('created_at'))
    .run(@rdb_connection)
</code></pre>

<p>```</p>

<p>You&rsquo;ll see I&rsquo;m using the RQL <code>inner_join</code>, and as part of my lamba I use the table attribute <code>p['exercises']</code> which contains my array of exercise ID&rsquo;s, then using the <code>contains</code> method on my exercise table <code>e['id']</code>. It works wonderfully. I&rsquo;m not sure if it is the best way to handle this, and I&rsquo;m still a RethinkDB newbie so this was a good workout for me.</p>

<h3>The API code</h3>

<p>The rest of my API code relied heavily on the RethinkDB <a href="http://www.rethinkdb.com/docs/examples/sinatra-pastie/">sample app &ndash; Pastie</a>. The really interesting joins are found around line 77.</p>

<p>I&rsquo;m including my own version here to help give some ideas how I&rsquo;m setting up my API:</p>

<p>``` ruby server.rb
require &lsquo;sinatra&rsquo;
require &lsquo;rethinkdb&rsquo;
require &lsquo;json&rsquo;</p>

<p>RDB_CONFIG = {
  :host => ENV[&lsquo;RDB_HOST&rsquo;] || &lsquo;localhost&rsquo;,
  :port => ENV[&lsquo;RDB_PORT&rsquo;] || 28015,
  :db   => ENV[&lsquo;RDB_DB&rsquo;]   || &lsquo;PtMotions&rsquo;
}</p>

<p>r = RethinkDB::RQL.new</p>

<h1>The pattern we&rsquo;re using for managing database connections is to have <strong>a connection per request</strong>.</h1>

<h1>We&rsquo;re using Sinatra&rsquo;s <code>before</code> and <code>after</code> for</h1>

<h1><a href="http://www.rethinkdb.com/api/ruby/connect/">opening a database connection</a> and</h1>

<h1><a href="http://www.rethinkdb.com/api/ruby/close/">closing it</a> respectively.</h1>

<p>before do</p>

<pre><code>headers 'Access-Control-Allow-Origin' =&gt; '*', 
        'Access-Control-Allow-Methods' =&gt; ['OPTIONS', 'GET', 'POST']
</code></pre>

<p>  begin</p>

<pre><code># When openning a connection we can also specify the database:
@rdb_connection = r.connect(:host =&gt; RDB_CONFIG[:host], :port =&gt; RDB_CONFIG[:port], :db =&gt; settings.db)
</code></pre>

<p>  rescue Exception => err</p>

<pre><code>logger.error "Cannot connect to RethinkDB database #{RDB_CONFIG[:host]}:#{RDB_CONFIG[:port]} (#{err.message})"
halt 501, 'This page could look nicer, unfortunately the error is the same: database not available.'
</code></pre>

<p>  end
end</p>

<h1>After each request we <a href="http://www.rethinkdb.com/api/ruby/close/">close the database connection</a>.</h1>

<p>after do
  begin</p>

<pre><code>@rdb_connection.close if @rdb_connection
</code></pre>

<p>  rescue</p>

<pre><code>logger.warn "Couldn't close connection"
</code></pre>

<p>  end
end</p>

<p>get &lsquo;/&rsquo; do
  @snippet = {}
  erb :new
end</p>

<p>post &lsquo;/add&rsquo; do</p>

<pre><code>@user = { :clinicId =&gt; params[:clinicId], :patientId =&gt; params[:patientId] }
# result = r.table('Users').insert(@user).run(@rdb_connnection)
result = r.table('Users').insert(@user).run(@rdb_connection)


if result['inserted'] == 1
    redirect "/#{result['generated_keys'][0]}"
else
    logger.error result
    redirect '/'
end
</code></pre>

<p>end</p>

<p>get &lsquo;/programs/:userId&rsquo; do</p>

<pre><code>content_type :json
@userId = params[:userId].downcase
max_results = params[:limit] || 10
results = r.table('Programs').
    filter('userId' =&gt; @userId).
    # pluck('id', 'name', 'created_at').
    without('userId').
    order_by(r.desc('created_at')).
    limit(max_results).
    run(@rdb_connection)

results.to_json
</code></pre>

<p>end</p>

<p>get &lsquo;/exercises/:programId&rsquo; do</p>

<pre><code>content_type :json

@programId = params[:programId] || '37feebf9-54ce-45f5-ba76-d13fe634b035'

exercises = r.table("Programs")
    .filter({'id' =&gt; @programId})
    .inner_join( r.table("Exercises")) { |p, e| 
        p['exercises'].contains( e['id'] ) 
    }
    .zip()
    .without('exercises', 'userId')
    .order_by(r.desc('created_at'))
    .run(@rdb_connection)

exercises.to_json
# exercise_ids.to_json
</code></pre>

<p>end</p>

<p>get &lsquo;/getuser/:patientId&rsquo; do</p>

<pre><code>content_type :json
user = r.table('Users')
    .filter({'patientId' =&gt; params[:patientId]})
    .run(@rdb_connection)

user.first.to_json
</code></pre>

<p>end
```</p>

<p>That&rsquo;s all folks! Hope this helps some in understanding how to do foreign key references in RethinkDB!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pow and weird starting issues]]></title>
    <link href="http://jbavari.github.io/blog/2014/05/07/pow-and-weird-starting-issues/"/>
    <updated>2014-05-07T14:56:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2014/05/07/pow-and-weird-starting-issues</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been getting this weird error from Pow in Rails 4:</p>

<p><code>Bundler::GemNotFound: Could not find rake-10.3.1 in any of the sources</code></p>

<p>Read more below to see what I did.</p>

<p>In boot.rb:</p>

<p>```
require &lsquo;rubygems&rsquo;</p>

<h1>Set up gems listed in the Gemfile.</h1>

<p>ENV[&lsquo;BUNDLE_GEMFILE&rsquo;] ||= File.expand_path(&lsquo;../../Gemfile&rsquo;, <strong>FILE</strong>)</p>

<p>require &lsquo;bundler/setup&rsquo; if File.exists?(ENV[&lsquo;BUNDLE_GEMFILE&rsquo;])</p>

<p>```</p>

<p>In config.ru:</p>

<p><code>
require ::File.expand_path('../config/environment',  __FILE__)
run Rails.application
</code></p>

<p>Hope this helps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In depth dive with Postgres Hstore and Rails 4]]></title>
    <link href="http://jbavari.github.io/blog/2014/04/26/in-depth-dive-with-postgres-hstore-and-rails-4/"/>
    <updated>2014-04-26T12:08:00-06:00</updated>
    <id>http://jbavari.github.io/blog/2014/04/26/in-depth-dive-with-postgres-hstore-and-rails-4</id>
    <content type="html"><![CDATA[<p>I had a unique little situation pop up that needed a little more flexibility when it came to storing data in the db. We use Postgres at RaiseMore because we respect ourselves, so naturally, I wanted to take a swing using some Hstore options for our ever changing data schema.</p>

<p>My intention is not to cover the basics of getting started with Rails 4 and <a href="http://www.postgresql.org/docs/9.3/static/hstore.html">Postgres HStore</a>, so <a href="http://tastehoneyco.com/blog/postgresql-array-and-hstore-column-reference/?utm_source=rubyweekly&amp;utm_medium=email/">read at Honey Co</a> or <a href="http://inopinatus.org/2013/07/12/using-arrays-of-hstore-with-rails-4/">here at inopinatus</a> to get started.</p>

<h2>What I needed</h2>

<p>Simple, to store a few bits of data about a communication &ndash; primarily the subject, message, date/time, and what networks it was sent out on. It may or may not have some of these fields, and the networks may or may not change in the future. This sounds perfect for HStore.</p>

<p>First I started with a simple schema:</p>

<p>```
CREATE TABLE comm_logs (</p>

<pre><code>id serial NOT NULL,
user_id integer,
history hstore
</code></pre>

<p>)
```</p>

<p>At first, I just wanted to store when a message was sent and on what networks. I figured I&rsquo;d just have an AR model with one hstore column and everything would fit into that. It looked like this:</p>

<p>```
class CommunicationLogging &lt; ActiveRecord::Base</p>

<pre><code>def self.log(user_id, network, message, subject = nil)
    comm = CommunicationLogging.where('user_id = ?', user_id).first
    if comm.nil?
        comm = CommunicationLogging.new
        comm.user_id = user_id
        # Storing network as an array incase they decide to send to another network after this.
        comm.history = { 'message' =&gt; message, 'subject' =&gt; subject, 'network' =&gt; [network], 'time' =&gt; DateTime.now }}
    else 
        # Add history to array stored in network
        comm.history['network'].push(network)
    end
    comm.history_will_change!
    comm.save!
end
</code></pre>

<p>end
```</p>

<p>Pretty easy right? I ran into some difficulties REAL fast. The first was from JSON serialization. When I did this:</p>

<p>```</p>

<h1>In Rails Console</h1>

<p>CommunicationLogging.find(4).history[&lsquo;network&rsquo;]
=> &ldquo;[\"facebook\&rdquo;, \&ldquo;twitter\&rdquo;]&ldquo;
```</p>

<p>It gave me a nice FAT serialized version of a Hash array. What good does a string do me? I want my object! BLEH!</p>

<p>We still have to get this thing working, so lets proceed anyway and just do some manual converions with PostgreSQL&rsquo;s awesome <code>to_json</code> functionality.</p>

<p>Our result:</p>

<p><code>
"{"c": "networks", "networks": "[\"facebook\", \"twitter\"]"}"
</code></p>

<p>Cool, so its gonna be nasty still. Ok, how about just using Rails to_json method:</p>

<p><code>
"{\"id\":11,\"event_user_id\":null,\"history\":null,\"networks\":{\"c\":\"networks\",\"networks\":\"[\\\"facebook\\\", \\\"twitter\\\"]\"}}"
</code></p>

<p>Thanks, but no thanks. I&rsquo;m pretty set on having an array of values instead of some manual labor on converting those values.</p>

<p>I was learning real fast that storing arrays in hstore was going to be a challenge. The next stab I wanted to take was to simplify the storage and retrieval as well as using natural arrays.</p>

<p>NOTE: I changed the way I attacked the problem here partly because I was doing it wrong. Hopefully you can learn from my mistakes? :&ndash;)</p>

<p>This was my next stab, altering the table structure just a bit:</p>

<p>```
CREATE TABLE communication_logs (</p>

<pre><code>id serial NOT NULL,
user_id integer,
history hstore[]
networks hstore
</code></pre>

<p>)
```</p>

<p>What I did here was harness the awesome power of PostgreSQL&rsquo;s arrays and hstore. Taking this thing to the limit. I did this for two reasons:</p>

<ul>
<li>Constraints changed, we could send multiple communications out on multiple networks at any given time</li>
<li>I wanted a log of history with whatever pieces of data may or may not be there</li>
<li>Be able to quickly get the networks sent out per user</li>
</ul>


<p>Now my AR model is decorated with <a href="http://api.rubyonrails.org/classes/ActiveRecord/Store.html">store_accessor</a> to give me model attributes for the networks. It also stores the log of messages in an array naturally through the model, and accessed as a real HSTORE with array values (instead of json, yay).</p>

<p>```
class CommunicationLogging &lt; ActiveRecord::Base</p>

<pre><code>store_accessor :networks, :facebook, :twitter, :email, :sms, :push

def set_network(network)
    # for brevity only one listed
    case network.downcase
    when 'twitter'
        self.twitter = true
    end
end

def self.log(user_id, network, message, subject = nil)
    comm = CommunicationLogging.where('user_id = ?', user_id).first
    if comm.nil?
        comm = CommunicationLogging.new
        comm.user_id = user_id
    end

    comm.set_network(network)

    history_log = { 'message' =&gt; message, 'subject' =&gt; subject, 'network' =&gt; network, 'time' =&gt; DateTime.now }
    comm.history.push(history_log)


    comm.networks_will_change!
    comm.history_will_change!
    comm.save!
end
</code></pre>

<p>end
```</p>

<p>So what happens when I to_json my fields now in PostgreSQL?</p>

<p>```
// Networks
&ldquo;{"twitter&rdquo;: &ldquo;true&rdquo;}"</p>

<p>// History
&ldquo;[{"time&rdquo;: &ldquo;2014-04-27T10:15:50-05:00&rdquo;, &ldquo;message&rdquo;: &ldquo;asf&rdquo;, &ldquo;network&rdquo;: &ldquo;twitter&rdquo;, &ldquo;subject&rdquo;: &ldquo;asd&rdquo;}]&ldquo;
```</p>

<p>And rails?</p>

<p>```</p>

<h1>Networks</h1>

<p>&ldquo;{"twitter&rdquo;:\&ldquo;true&rdquo;}"</p>

<h1>History</h1>

<p>&ldquo;[{"time&rdquo;:&ldquo;2014-04-27T10:15:50-05:00&rdquo;,&ldquo;message&rdquo;:&ldquo;asf&rdquo;,&ldquo;network&rdquo;:&ldquo;twitter&rdquo;,&ldquo;subject&rdquo;:&ldquo;asd&rdquo;}]&ldquo;
```</p>

<p>Beautiful.</p>

<p>I had a lot of fun using PostgreSQL and Rails 4. I didn&rsquo;t find a lot of in-depth knowledge on it so I wanted to shed some light on the topic and hope this would push someone else who might be considering to try it out to give it a go.</p>

<p>I&rsquo;d like to follow up this post with another article on how to search these bad boys.</p>

<p>In closing:</p>

<ul>
<li>I will definitely use hstore more in the future. I like the freedom to just store whatever I want</li>
<li>I need to reach out to the Rails team and see what I can do about improving the array support in Active Record</li>
<li>I hope you try it out as well</li>
</ul>


<h3>Additional Resources</h3>

<ul>
<li><a href="http://postgresguide.com/sexy/hstore.html">Postgres Guide on HStore</a></li>
<li><a href="http://mikecoutermarsh.com/using-hstore-with-rails-4/">Mike Countermash&rsquo;s guide to Hstore with Rails 4</a></li>
<li><a href="http://platformonrails.wordpress.com/2013/03/17/enabling-postgresql-hstore-with-rails-4/">Platform on Rails &ndash; Enabling PostgreSQL Hstore in Rails 4</a></li>
<li><a href="http://blog.remarkablelabs.com/2012/12/a-love-affair-with-postgresql-rails-4-countdown-to-2013">RemarkableLabs &ndash; A love affair with PostgreSQL [Rails 4 Countdown to 2013]</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
